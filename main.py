import streamlit as st                      # streamlit
from streamlit_folium import st_folium    # streamlit„Åßfolium„Çí‰Ωø„ÅÜ
import pandas as pd                         # CSV„Çí„Éá„Éº„Çø„Éï„É¨„Éº„É†„Å®„Åó„Å¶Ë™≠„ÅøËæº„ÇÄ
import requests
import urllib
from urllib.parse import urlencode

# Ë°®Á§∫„Åô„Çã„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Åø2
df_final = pd.read_csv('realestate_info_finalimage.csv')

# „Éö„Éº„Ç∏Ë®≠ÂÆö
st.set_page_config(
    page_title="streamlit-folium„ÉÜ„Çπ„Éà",
    page_icon="üóæ",
    layout="wide"
)

# 1. ÁîªÈù¢„ÅÆË°®Á§∫
# „Çµ„Ç§„Éâ„Éê„Éº
st.sidebar.title('MAPË°®Á§∫Êù°‰ª∂')
xmax = st.sidebar.number_input('Áâ©‰ª∂Ë°®Á§∫Êï∞ Ôºö', 0, 1000, 100)
ymax = st.sidebar.number_input('test Ôºö', 0, 1000, 200)

# „É°„Ç§„É≥ÁîªÈù¢ Ê§úÁ¥¢
st.title('Ë≥ÉË≤∏Ê§úÁ¥¢')
st.markdown("---")
st.subheader('Ê§úÁ¥¢Êù°‰ª∂')
extra_configs_0 = st.expander("Ê§úÁ¥¢Êù°‰ª∂1")  # Extra Configs
with extra_configs_0:
    se1 = st.number_input('ÂÆ∂Ë≥É[‰∏áÂÜÜ]‰ª•‰∏ã Ôºö', 0, 500, 30)
    se2 = st.number_input('Èù¢Á©ç[m^2]‰ª•‰∏ä Ôºö', 0, 500, 50)

extra_configs_1 = st.expander("Ê§úÁ¥¢Êù°‰ª∂2")  # Extra Configs
with extra_configs_1:
    se3 = st.multiselect(
        'ÈñìÂèñ„Çä', ['„ÉØ„É≥„É´„Éº„É†', '1K', '1DK', '1LDK', '2DK', '2LDK'], ['2LDK'])
    se4 = st.multiselect('Âå∫', ['ÂìÅÂ∑ù', 'Ê∏ãË∞∑', 'Ê±üÊà∏Â∑ù', 'Ê∏Ø'], ['ÂìÅÂ∑ù', 'Ê±üÊà∏Â∑ù'])
    #se5 = st.multiselect('Â∏ÇÁî∫', ['ÂçóÂìÅÂ∑ù', 'Êù±‰∫îÂèçÁî∞', 'ÂçóÂ§ß‰∫ï', 'Êù±ÂìÅÂ∑ù'], ['ÂçóÂìÅÂ∑ù'])

# ‰ΩèÊâÄËøΩÂä†
extra_configs_2 = st.expander("Âë®Ëæ∫ÊñΩË®≠")  # Extra Configs
with extra_configs_2:
    se6 = st.multiselect('Ê§úÁ¥¢ÊñΩË®≠', ['„Ç≥„É≥„Éì„Éã', '„Çπ„Éº„Éë„Éº', 'ÁóÖÈô¢', 'ÂÖ¨Âúí'], ['„Ç≥„É≥„Éì„Éã'])


# „Éï„Ç£„É´„Çø„É™„É≥„Ç∞
df_final0 = df_final
joken1 = (df_final0["ÂÆ∂Ë≥É"] > 0) & (df_final0["ÂÆ∂Ë≥É"] < se1)
df_final0 = df_final0[joken1]
joken2 = (df_final0["Èù¢Á©ç"] > se2) & (df_final0["Èù¢Á©ç"] < 300)
df_final0 = df_final0[joken2]
joken3 = df_final0["ÈñìÂèñ„Çä"].isin(se3)
df_final0 = df_final0[joken3]
joken4 = df_final0["Âå∫"].isin(se4)
df_final0 = df_final0[joken4]

st.subheader('(„Éï„Ç£„É´„Çø„ÉºÂæå„ÅÆ„Éá„Éº„ÇøÁ¢∫Ë™çÁî®)')
# „Éï„Ç£„É´„Çø„ÉºÂæå„ÅÆÂú∞Âõ≥„Éá„Éº„Çø„Çí‰ΩúÊàê„Åô„Çã
# Ë°®Á§∫„Åô„Çã„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Åø1

df_final0 = df_final0.drop_duplicates(subset=['ÂêçÁß∞', 'ÈöéÊï∞'])

se90 = st.write(df_final0)
se91 = st.write(df_final0.shape)

if df_final0.shape[0] > 50:
    df = df_final0[:50]
else:
    df = df_final0


def Map_info(x):
    makeUrl = "https://msearch.gsi.go.jp/address-search/AddressSearch?q="
    s_quote = urllib.parse.quote(x['„Ç¢„Éâ„É¨„Çπ'])
    response = requests.get(makeUrl + s_quote)
    try:
        map_info_d = response.json()[0]["geometry"]["coordinates"]
        #map_info_d = pd.DataFrame(map_info)
        return map_info_d[0], map_info_d[1]
    except Exception as e:
        print(e)
        return 0, 0


df_info = pd.DataFrame()
df_info[['ÁµåÂ∫¶', 'Á∑ØÂ∫¶']] = df.apply(lambda x: Map_info(x),
                                 axis=1, result_type='expand')

df = pd.concat([df, df_info], axis=1)

se90 = st.write(df)
se91 = st.write(df.shape)
